"""
Pipeline principal del Asesor Energético Predictivo
"""

import logging
from pathlib import Path
import sys

# Agregar src al path para imports
sys.path.append(str(Path(__file__).parent))

from config import DATA_FILE, OUTPUT_DIR, MODELS_DIR
from data_loader import load_and_validate
from preprocess import make_features
from model import train_model, save_model, evaluate
from forecast import forecast_next_3
from report import build_charts_and_tables, generate_docx, calculate_metrics

def main():
    """
    Función principal que orquesta todo el pipeline
    """
    try:
        print("Iniciando Asesor Energetico Predictivo")
        print("=" * 50)
        
        run_pipeline()
        
        print("=" * 50)
        print("Pipeline completado exitosamente")
        print(f"Archivos generados en: {OUTPUT_DIR}")
        
    except Exception as e:
        print(f"Error en el pipeline: {str(e)}")
        raise

def run_pipeline():
    """
    Ejecuta el pipeline completo del análisis predictivo
    """
    # 1. Cargar y validar datos
    print("\nPaso 1: Cargando y validando datos...")
    df = load_and_validate(DATA_FILE)
    
    # 2. Crear features
    print("\nPaso 2: Creando features...")
    X, y, df_features = make_features(df)
    
    # 3. Split temporal
    print("\nPaso 3: Realizando split temporal...")
    from preprocess import time_based_split
    X_train, X_test, y_train, y_test = time_based_split(X, y, train_size=0.8)
    
    # 4. Entrenar modelo
    print("\nPaso 4: Entrenando modelo...")
    model = train_model(X_train, y_train, alphas=[0.1, 1, 10])
    
    # 5. Evaluar modelo
    print("\nPaso 5: Evaluando modelo...")
    y_pred = model.predict(X_test)
    metrics = evaluate(y_test, y_pred)
    
    # 6. Predicción a futuro
    print("\nPaso 6: Realizando predicción a 3 meses...")
    forecast_df = forecast_next_3(model, df_features)
    
    # 7. Generar reportes
    print("\nPaso 7: Generando gráficos y tablas...")
    summary_df = build_charts_and_tables(y_test, y_pred, OUTPUT_DIR)
    
    # 8. Generar informe Word
    print("\nPaso 8: Generando informe Word...")
    from datetime import datetime
    client_name = "CLIENTE"  # Se puede parametrizar
    chart_path = OUTPUT_DIR / "real_vs_pred.png"
    report_path = OUTPUT_DIR / f"informe_{client_name}_{datetime.now().strftime('%Y-%m-%d')}.docx"
    
    generate_docx(metrics, summary_df, chart_path, report_path, client_name, forecast_df)
    
    # 9. Guardar modelo
    print("\nPaso 9: Guardando modelo...")
    model_path = MODELS_DIR / "model_ridge.pkl"
    save_model(model, model_path)
    
    # 10. Mostrar resumen final
    print("\nRESUMEN FINAL:")
    print(f"   MAPE: {metrics['MAPE']:.1f}%")
    print(f"   Grafico: {chart_path}")
    print(f"   Informe: {report_path}")
    print(f"   Modelo: {model_path}")
    print(f"   Predicciones proximos 3 meses:")
    for _, row in forecast_df.iterrows():
        print(f"      {row['Mes'].strftime('%Y-%m')}: {row['Consumo_KWh']:.0f} KWh")

if __name__ == "__main__":
    main()
